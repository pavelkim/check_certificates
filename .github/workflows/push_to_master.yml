name: Push to master

on:
  push:
    branches: [ master ]

jobs:

  build:
    name: Build master branch
    runs-on: ubuntu-latest
    steps:

    - name: Check out code
      uses: actions/checkout@v2

    - name: Check if .version file exists
      run: if [[ -f .version ]]; then exit 0; else exit 2; fi

    - name: Read out .version file
      id: readversionfile
      run: echo "::set-output name=desiredversion::$(cat .version)"

    - name: Verify version
      run: echo "${{steps.readversionfile.outputs.desiredversion}}"

    - name: Test run
      run: |
        export PROMETHEUS_EXPORT_FILENAME="./metrics"
        bash check_certificates.sh -G -i test/inputfile.txt --only-alerting --alert-limit 5

    - name: Lookup planned tag
      id: tagexists
      run: |
        echo "::set-output name=tagexists::$(curl -s -X GET -H 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' --url https://api.github.com/repos/${{ github.repository }}/git/refs/tags/${{steps.readversionfile.outputs.desiredversion}} | jq .object.sha)"
    
    - name: Check if planned tag doesn't exist yet
      run: if [[ "${{ steps.tagexists.outputs.tagexists }}" == "null" ]]; then exit 0; else exit 2; fi

    - name: Set version in the script
      run: sed -i".bak" -e "s/^VERSION=\"DEV\"$/VERSION=\"${{steps.readversionfile.outputs.desiredversion}}\"/" check_certificates.sh

    - name: Verify version from the script
      run: grep "VERSION=" check_certificates.sh

    - name: Create a new tag
      run: |
        curl --request POST --url https://api.github.com/repos/${{ github.repository }}/git/tags \
        -H 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
        -H 'content-type: application/json' \
        --data '{"tag": "${{steps.readversionfile.outputs.desiredversion}}",
          "message": "Pipeline build tag",
          "object": "${{ github.sha }}",
          "type": "commit",
          "tagger": {
            "name": "Alice from Wonderland",
            "email": "noreply@localhost.localdomain",
            "date": "${{steps.timestamp.outputs.timestamp}}"
          }'

    - name: Create a Release
      id: create_release
      uses: actions/create-release@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{steps.readversionfile.outputs.desiredversion}}
        release_name: Release ${{steps.readversionfile.outputs.desiredversion}}
        body: Automatically generated release
        draft: false
        prerelease: false

    - name: Upload a Release Asset
      uses: actions/upload-release-asset@v1.0.2
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./check_certificates.sh
        asset_name: check_certificates.sh
        asset_content_type: application/octet-stream


    - name: Upload assets to pavelkim.github.io
      id: upload_to_pavelkim_github_io
      shell: bash
      run: |
        SSH_DIR="${HOME}/.ssh"
        PRIVATE_KEY_FILENAME="${SSH_DIR}/id_ecdsa"
        REPO_CLONE_PATH="${PWD}/repo"
        REPO_DIST_PATH="${REPO_CLONE_PATH}/dist/check_certificates"
        REPO_VERSIONED_PATH="${REPO_DIST_PATH}/${{ steps.readversionfile.outputs.desiredversion }}"
        REPO_LATEST_PATH="${REPO_DIST_PATH}/check_certificates/latest"

        mkdir -pv "${SSH_DIR}"
        echo "${{ secrets.PAVELKIM_GITHUB_IO_ID_ECDSA }}" >> "${PRIVATE_KEY_FILENAME}"
        chmod 600 "${PRIVATE_KEY_FILENAME}"

        git config --global user.email "github-actions@local"
        git config --global user.name "GitHub Actions"

        mkdir -pv "${REPO_CLONE_PATH}"
        git clone "${{ secrets.PAVELKIM_GITHUB_IO_REPO_URL }}" "${REPO_CLONE_PATH}"

        mkdir -pv "${REPO_VERSIONED_PATH}"

        cp -v ./check_certificates.sh "${REPO_VERSIONED_PATH}/check_certificates.sh"

        cd "${REPO_DIST_PATH}"
        ln -sfn "${{ steps.readversionfile.outputs.desiredversion }}" "latest"
        ls -la

        REPO_CHANGES=$( git -C "${REPO_CLONE_PATH}" status --porcelain | wc -l )
        
        # My best guess on how to cast to int:
        REPO_CHANGES_COUNT=$(( REPO_CHANGES + 0 ))

        if [[ "${REPO_CHANGES_COUNT}" -gt 0 ]]; then
          git -C "${REPO_CLONE_PATH}" diff-index HEAD
          git -C "${REPO_CLONE_PATH}" add "${REPO_DIST_PATH}"
          git -C "${REPO_CLONE_PATH}" commit -m "[Change] check_certificates scripts release ${{ steps.readversionfile.outputs.desiredversion }}"
          git -C "${REPO_CLONE_PATH}" push origin master
        else
          echo "No changes to commit"
        fi