---
# yamllint disable rule:line-length
# yamllint disable rule:truthy

name: Feature branch

on:
  push:
    branches:
      - '*'
      - '!master'

jobs:

  validate_new_version:
    name: Validate new version
    runs-on: ubuntu-latest
    outputs:
      planned_version: ${{ steps.validate_new_version.outputs.planned_version }}
      version_file_exists: ${{ steps.validate_new_version.outputs.version_file_exists }}
      tag_hash: ${{ steps.validate_new_version.outputs.tag_hash }}
      can_create: ${{ steps.validate_new_version.outputs.can_create }}
      tag_exists: ${{ steps.validate_new_version.outputs.tag_exists }}
      branch_name: ${{ steps.validate_new_version.outputs.branch_name }}

    steps:

      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0


      - name: Use latest released action
        id: validate_new_version
        uses: reinvented-stuff/validate-version-action@master
        with:
          version_filename: ".version"
          github_token: "${{ secrets.GITHUB_TOKEN }}"
          fail_on_error: false


  docker_image:
    name: Build Docker image
    outputs:
      job_status: ${{ job.status }}
      artifact_name: ${{ steps.set_artifact_name.outputs.name }}
    runs-on: ubuntu-latest

    needs:
      - validate_new_version

    env:
      PLANNED_VERSION: ${{ needs.validate_new_version.outputs.planned_version }}
      TAG_HASH: ${{ needs.validate_new_version.outputs.tag_hash }}
      CAN_CREATE_RELEASE: ${{ needs.validate_new_version.outputs.can_create }}
      TAG_EXISTS: ${{ needs.validate_new_version.outputs.tag_exists }}
      BRANCH_NAME: ${{ needs.validate_new_version.outputs.branch_name }}
      APP_NAME: "check_certificates"

    if: >
      github.event_name == 'push'

    steps:

      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0


      - name: Build Docker image
        id: build_docker_image
        uses: reinvented-stuff/build-docker-image-action@master
        with:
          github_token: "${{ secrets.GITHUB_TOKEN }}"
          name: "api"
          planned_version: "${{ env.PLANNED_VERSION }}"


      - name: Send out notification about docker image build
        uses: rest-gateway/notification-action@master
        with:
          message: |
            Docker image: <b>${{ env.APP_NAME }}</b> v${{ env.PLANNED_VERSION }} (${{ env.BRANCH_NAME }})

            <code>${{ steps.build_docker_image.outputs.image_full_name }}</code>
          recipient: "${{ secrets.NOTIFICATIONS_DEFAULT_RECIPIENT }}"
          rest_gateway_url: "${{ secrets.REST_GATEWAY_API_URL }}"
          rest_gateway_token: "${{ secrets.REST_GATEWAY_TOKEN }}"
          rest_gateway_bot_name: "${{ secrets.REST_GATEWAY_BOT_NAME }}"


  build_and_test:
    name: Build and Test
    outputs:
      job_status: ${{ job.status }}
      artifact_name: ${{ steps.set_artifact_name.outputs.name }}
    runs-on: ubuntu-latest

    needs:
      - validate_new_version

    env:
      PLANNED_VERSION: ${{ needs.validate_new_version.outputs.planned_version }}
      TAG_HASH: ${{ needs.validate_new_version.outputs.tag_hash }}
      CAN_CREATE_RELEASE: ${{ needs.validate_new_version.outputs.can_create }}
      TAG_EXISTS: ${{ needs.validate_new_version.outputs.tag_exists }}
      BRANCH_NAME: ${{ needs.validate_new_version.outputs.branch_name }}
      APP_NAME: "check_certificates"

    if: >
      github.event_name == 'push'

    steps:

      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0


      - name: Test run
        id: test
        run: |
          export PROMETHEUS_EXPORT_FILENAME="./metrics"
          bash check_certificates.sh -G -i test/inputfile.txt --only-alerting --alert-limit 5


      - name: Set version in the script
        id: set_version_in_script
        run: sed -i".bak" -e "s/^VERSION=\"DEV\"$/VERSION=\"${{ env.PLANNED_VERSION }}\"/" check_certificates.sh


      - name: Verify version in the script
        id: check_version_in_script
        run: grep "VERSION=\"${{ env.PLANNED_VERSION }}\"" check_certificates.sh


      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.1.0
        with:
          name: "check_certificates.sh"
          path: "check_certificates.sh"
          if-no-files-found: error
          retention-days: 90


      - name: Send out notification about build
        uses: rest-gateway/notification-action@master
        with:
          message: |
            Build: <b>${{ env.APP_NAME }}</b> v${{ env.PLANNED_VERSION }} (${{ env.BRANCH_NAME }})

            <code>https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}</code>
          recipient: "${{ secrets.NOTIFICATIONS_DEFAULT_RECIPIENT }}"
          rest_gateway_url: "${{ secrets.REST_GATEWAY_API_URL }}"
          rest_gateway_token: "${{ secrets.REST_GATEWAY_TOKEN }}"
          rest_gateway_bot_name: "${{ secrets.REST_GATEWAY_BOT_NAME }}"

...
