---
# yamllint disable rule:line-length
# yamllint disable rule:truthy

name: Everything

on:
  push:
    branches:
      - '*'

jobs:

  validate_new_version:
    name: Validate new version
    runs-on: ubuntu-latest
    outputs:
      planned_version: ${{ steps.validate_new_version.outputs.planned_version }}
      version_file_exists: ${{ steps.validate_new_version.outputs.version_file_exists }}
      tag_hash: ${{ steps.validate_new_version.outputs.tag_hash }}
      can_create: ${{ steps.validate_new_version.outputs.can_create }}
      tag_exists: ${{ steps.validate_new_version.outputs.tag_exists }}
      branch_name: ${{ steps.validate_new_version.outputs.branch_name }}

    steps:

      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0


      - name: Use latest released action
        id: validate_new_version
        uses: reinvented-stuff/validate-version-action@1.2.0
        with:
          version_filename: ".version"
          github_token: "${{ secrets.GITHUB_TOKEN }}"
          fail_on_error: false


  build_and_test:
    name: Build and Test
    outputs:
      job_status: ${{ job.status }}
      artifact_name: ${{ steps.set_artifact_name.outputs.name }}
    runs-on: ubuntu-latest

    needs:
      - validate_new_version

    env:
      PLANNED_VERSION: ${{ needs.validate_new_version.outputs.planned_version }}
      TAG_HASH: ${{ needs.validate_new_version.outputs.tag_hash }}
      CAN_CREATE_RELEASE: ${{ needs.validate_new_version.outputs.can_create }}
      TAG_EXISTS: ${{ needs.validate_new_version.outputs.tag_exists }}
      BRANCH_NAME: ${{ needs.validate_new_version.outputs.branch_name }}
      APP_NAME: "check_certificates"

    if: >
      github.event_name == 'push'

    steps:

      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0


      - name: Test run
        id: test
        run: |
          export PROMETHEUS_EXPORT_FILENAME="./metrics"
          bash check_certificates.sh -G -i test/inputfile.txt --only-alerting --alert-limit 5


      - name: Set version in the script
        id: set_version_in_script
        run: |
          sed -i".bak" -e "s/^VERSION=\"DEV\"$/VERSION=\"${{ env.PLANNED_VERSION }}\"/" check_certificates.sh
          sed -i".bak" -e "s/^VERSION=\"DEV\"$/VERSION=\"${{ env.PLANNED_VERSION }}\"/" wrapper_loop.sh


      - name: Verify version in the script
        id: check_version_in_script
        run: |
          grep "VERSION=\"${{ env.PLANNED_VERSION }}\"" check_certificates.sh
          grep "VERSION=\"${{ env.PLANNED_VERSION }}\"" wrapper_loop.sh


      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: "check_certificates.sh"
          path: "check_certificates.sh"
          if-no-files-found: error
          retention-days: 90


      - name: Send out notification about build
        uses: rest-gateway/notification-action@1.0.9
        with:
          message: |
            Build: <b>${{ env.APP_NAME }}</b> v${{ env.PLANNED_VERSION }} (${{ env.BRANCH_NAME }})

            <code>https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}</code>
          recipient: "${{ secrets.NOTIFICATIONS_DEFAULT_RECIPIENT }}"
          rest_gateway_url: "${{ secrets.REST_GATEWAY_API_URL }}"
          rest_gateway_token: "${{ secrets.REST_GATEWAY_TOKEN }}"
          rest_gateway_bot_name: "${{ secrets.REST_GATEWAY_BOT_NAME }}"


      - name: Build Docker image (ghcr)
        id: build_docker_image_ghcr
        uses: reinvented-stuff/build-docker-image-action@2.6.0
        with:
          registry_address: "ghcr.io"
          registry_username: "${{ github.actor }}"
          registry_token: "${{ secrets.GITHUB_TOKEN }}"
          name: "${{ github.repository }}/${{ env.APP_NAME }}"
          planned_version: "${{ env.PLANNED_VERSION }}"
          build_args: |-
            APP_VERSION=${{ env.PLANNED_VERSION }}


      - name: Build Docker image (docker hub)
        id: build_docker_image_hub
        uses: reinvented-stuff/build-docker-image-action@2.6.0
        with:
          registry_address: "docker.io"
          registry_username: "${{ secrets.DOCKER_HUB_USERNAME }}"
          registry_token: "${{ secrets.DOCKER_HUB_TOKEN }}"
          name: "${{ secrets.DOCKER_HUB_IMAGE_NAME }}"
          planned_version: "${{ env.PLANNED_VERSION }}"
          build_args: |-
            APP_VERSION=${{ env.PLANNED_VERSION }}


      - name: Send out notification about docker image build
        uses: rest-gateway/notification-action@1.0.9
        with:
          message: |
            Docker image: <b>${{ env.APP_NAME }}</b> v${{ env.PLANNED_VERSION }} (${{ env.BRANCH_NAME }})

            <code>${{ steps.build_docker_image_hub.outputs.image_full_name }}</code>
            <code>${{ steps.build_docker_image_ghcr.outputs.image_full_name }}</code>
          recipient: "${{ secrets.NOTIFICATIONS_DEFAULT_RECIPIENT }}"
          rest_gateway_url: "${{ secrets.REST_GATEWAY_API_URL }}"
          rest_gateway_token: "${{ secrets.REST_GATEWAY_TOKEN }}"
          rest_gateway_bot_name: "${{ secrets.REST_GATEWAY_BOT_NAME }}"


  release:
    name: Release
    outputs:
      job_status: ${{ job.status }}
      artifact_name: ${{ steps.set_artifact_name.outputs.name }}
    runs-on: ubuntu-latest

    needs:
      - validate_new_version
      - build_and_test

    env:
      PLANNED_VERSION: ${{ needs.validate_new_version.outputs.planned_version }}
      TAG_HASH: ${{ needs.validate_new_version.outputs.tag_hash }}
      CAN_CREATE_RELEASE: ${{ needs.validate_new_version.outputs.can_create }}
      TAG_EXISTS: ${{ needs.validate_new_version.outputs.tag_exists }}
      BRANCH_NAME: ${{ needs.validate_new_version.outputs.branch_name }}
      APP_NAME: "check_certificates"

    if: >
      needs.validate_new_version.outputs.can_create == 'true' &&
      needs.validate_new_version.outputs.branch_name == 'master' &&
      github.event_name == 'push'

    steps:

      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0


      - name: Download articact from the build stage
        uses: actions/download-artifact@v4
        with:
          name: "check_certificates.sh"


      - name: Generate changelog
        id: generate_changelog
        uses: reinvented-stuff/changelog-render-action@1.0.1
        with:
          long_changelog_export_filename: ".long_changelog.md"
          short_changelog_export_filename: ".short_changelog.md"
          print_out_changelogs: true


      - name: Create a new tag
        id: create_release_tag
        run: |
          curl --request POST --url https://api.github.com/repos/${{ github.repository }}/git/tags \
          -H 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
          -H 'content-type: application/json' \
          --data '{"tag": "${{ needs.validate_new_version.outputs.planned_version }}",
            "message": "Pipeline build tag",
            "object": "${{ github.sha }}",
            "type": "commit",
            "tagger": {
              "name": "Alice from Wonderland",
              "email": "noreply@localhost.localdomain",
              "date": "${{steps.timestamp.outputs.timestamp}}"
            }'


      - name: Update the 'latest' tag
        id: create_latest_tag
        run: |
          curl --request POST --url https://api.github.com/repos/${{ github.repository }}/git/tags \
          -H 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
          -H 'content-type: application/json' \
          --data '{"tag": "latest",
            "message": "Pipeline build tag",
            "object": "${{ github.sha }}",
            "type": "commit",
            "tagger": {
              "name": "Alice from Wonderland",
              "email": "noreply@localhost.localdomain",
              "date": "$( date "+%FT%TZ" )"
            }'


      - name: Create a Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate_new_version.outputs.planned_version }}
          release_name: v${{ needs.validate_new_version.outputs.planned_version }}
          body_path: ${{ steps.generate_changelog.outputs.short_changelog_export_filename }}
          draft: false
          prerelease: false


      - name: Upload a Release Asset
        uses: actions/upload-release-asset@v1.0.2
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./check_certificates.sh
          asset_name: check_certificates.sh
          asset_content_type: application/octet-stream


      - name: Upload assets to pavelkim.github.io
        id: upload_to_pavelkim_github_io
        shell: bash
        run: |
          SSH_DIR="${HOME}/.ssh"
          PRIVATE_KEY_FILENAME="${SSH_DIR}/id_ecdsa"
          REPO_CLONE_PATH="${PWD}/repo"
          REPO_DIST_PATH="${REPO_CLONE_PATH}/dist/check_certificates"
          REPO_VERSIONED_PATH="${REPO_DIST_PATH}/${{ needs.validate_new_version.outputs.planned_version }}"
          REPO_LATEST_PATH="${REPO_DIST_PATH}/check_certificates/latest"

          mkdir -pv "${SSH_DIR}"
          echo "${{ secrets.PAVELKIM_GITHUB_IO_ID_ECDSA }}" >> "${PRIVATE_KEY_FILENAME}"
          chmod 600 "${PRIVATE_KEY_FILENAME}"

          git config --global user.email "github-actions@local"
          git config --global user.name "GitHub Actions"

          mkdir -pv "${REPO_CLONE_PATH}"
          git clone "${{ secrets.PAVELKIM_GITHUB_IO_REPO_URL }}" "${REPO_CLONE_PATH}"

          mkdir -pv "${REPO_VERSIONED_PATH}"

          cp -v ./check_certificates.sh "${REPO_VERSIONED_PATH}/check_certificates.sh"

          cd "${REPO_DIST_PATH}"
          ln -sfn "${{ needs.validate_new_version.outputs.planned_version }}" "latest"
          ls -la

          REPO_CHANGES=$( git -C "${REPO_CLONE_PATH}" status --porcelain | wc -l )
          
          # My best guess on how to cast to int:
          REPO_CHANGES_COUNT=$(( REPO_CHANGES + 0 ))

          if [[ "${REPO_CHANGES_COUNT}" -gt 0 ]]; then
            git -C "${REPO_CLONE_PATH}" diff-index HEAD
            git -C "${REPO_CLONE_PATH}" add "${REPO_DIST_PATH}"
            git -C "${REPO_CLONE_PATH}" commit -m "[Change] check_certificates scripts release ${{ needs.validate_new_version.outputs.planned_version }}"
            git -C "${REPO_CLONE_PATH}" push origin master
          else
            echo "No changes to commit"
          fi

...
